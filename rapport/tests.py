from django.test import TestCase, Client
from django.urls import reverse
from django.utils import timezone
from .models import Rapport
from .models import Produit
from .models import MouvementStock
from utilisateur.models import Utilisateur
from io import BytesIO

# Create your tests here.
class RapportViewsTest(TestCase):
    """
    Tests fonctionnels pour la gestion des rapports (cr√©ation, affichage, export PDF/Excel/CSV)
    """

    def setUp(self):
        
        # Utilisateur connect√©
        self.user = Utilisateur.objects.create_user(username='admin', password='1234')
        self.client = Client()
        self.client.login(username='admin', password='1234')

        # Produit de test
        self.produit = Produit.objects.create(
            nom="Ordinateur HP",
            prix_achat=450000,
            prix_vente=500000,
            stock_actuel=10
        )

        # Cr√©ation d‚Äôun rapport de test
        self.rapport = Rapport.objects.create(
            # titre="Rapport Entr√©es",
            type_rapport="ENTREE",
            date_generation=timezone.now()
        )

        # Mouvement li√© au rapport
        MouvementStock.objects.create(
            produit=self.produit,
            type_mouvement="ENTREE",
            quantite=5,
            date_mouvement=timezone.now(),
            utilisateur=self.user,
            rapport=self.rapport
        )

    # =====================================================
    # üîç TESTS DE CONSULTATION (READ)
    # =====================================================

    def test_liste_rapports(self):
        """V√©rifie que la liste des rapports s'affiche correctement"""
        response = self.client.get(reverse('liste_rapports'))
        self.assertEqual(response.status_code, 200)
        # self.assertIn(self.rapport.titre, str(response.content))

    def test_detail_rapport(self):
        """V√©rifie que le d√©tail d‚Äôun rapport est consultable"""
        response = self.client.get(reverse('details_rapport', args=[self.rapport.id]))
        self.assertEqual(response.status_code, 200)
        # self.assertIn(self.rapport.type_rapport, str(response.content))

    # =====================================================
    # üßæ TESTS DE CREATION (CREATE)
    # =====================================================

    def test_creer_rapport(self):
        """V√©rifie qu‚Äôun rapport peut √™tre cr√©√©"""
        data = {
            'titre': 'Rapport Sorties',
            'type_rapport': 'SORTIE',
            'date_generation': timezone.now()
        }
        response = self.client.post(reverse('generer_rapport'), data)
        self.assertEqual(response.status_code, 302)
        self.assertTrue(Rapport.objects.filter(type_rapport='SORTIE').exists())

    # =====================================================
    # üßπ TESTS DE SUPPRESSION
    # =====================================================

    def test_supprimer_rapport(self):
        """V√©rifie qu‚Äôun rapport peut √™tre supprim√©"""
        response = self.client.post(reverse('supprimer_rapport', args=[self.rapport.id]))
        self.assertEqual(response.status_code, 302)
        self.assertFalse(Rapport.objects.filter(id=self.rapport.id).exists())

    # =====================================================
    # üì§ TESTS D‚ÄôEXPORTATION (CSV / EXCEL / PDF)
    # =====================================================

    def test_export_csv(self):
        """V√©rifie que l‚Äôexport CSV fonctionne"""
        response = self.client.get(reverse('exporter_rapport_csv', args=[self.rapport.id]))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'text/csv')
        self.assertIn('Produit', response.content.decode())

    def test_export_excel(self):
        """V√©rifie que l‚Äôexport Excel fonctionne"""
        response = self.client.get(reverse('exporter_rapport_excel', args=[self.rapport.id]))
        self.assertEqual(response.status_code, 200)
        self.assertIn(
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            response['Content-Type']
        )
        # Le contenu doit √™tre binaire (fichier Excel)
        self.assertIsInstance(response.content, bytes)

    def test_export_pdf(self):
        """V√©rifie que l‚Äôexport PDF fonctionne"""
        response = self.client.get(reverse('exporter_rapport_pdf', args=[self.rapport.id]))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'application/pdf')
        # Le contenu PDF commence g√©n√©ralement par "%PDF"
        self.assertTrue(response.content.startswith(b'%PDF'))